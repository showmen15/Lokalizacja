// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hokuyo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amber {
namespace hokuyo_proto {

namespace {

const ::google::protobuf::Descriptor* Scan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hokuyo_2eproto() {
  protobuf_AddDesc_hokuyo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hokuyo.proto");
  GOOGLE_CHECK(file != NULL);
  Scan_descriptor_ = file->message_type(0);
  static const int Scan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, distances_),
  };
  Scan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scan_descriptor_,
      Scan::default_instance_,
      Scan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hokuyo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scan_descriptor_, &Scan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hokuyo_2eproto() {
  delete Scan::default_instance_;
  delete Scan_reflection_;
}

void protobuf_AddDesc_hokuyo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::amber::protobuf_AddDesc_drivermsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014hokuyo.proto\022\022amber.hokuyo_proto\032\017driv"
    "ermsg.proto\"1\n\004Scan\022\022\n\006angles\030\001 \003(\001B\002\020\001\022"
    "\025\n\tdistances\030\002 \003(\005B\002\020\001:)\n\017get_single_sca"
    "n\022\020.amber.DriverMsg\030, \001(\010:8\n\004scan\022\020.ambe"
    "r.DriverMsg\0300 \001(\0132\030.amber.hokuyo_proto.S"
    "canB,\n\035pl.edu.agh.amber.hokuyo.protoB\013Ho"
    "kuyoProto", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hokuyo.proto", &protobuf_RegisterTypes);
  Scan::default_instance_ = new Scan();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::amber::DriverMsg::default_instance(),
    44, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    48, 11, false, false,
    &::amber::hokuyo_proto::Scan::default_instance());
  Scan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hokuyo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hokuyo_2eproto {
  StaticDescriptorInitializer_hokuyo_2eproto() {
    protobuf_AddDesc_hokuyo_2eproto();
  }
} static_descriptor_initializer_hokuyo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Scan::kAnglesFieldNumber;
const int Scan::kDistancesFieldNumber;
#endif  // !_MSC_VER

Scan::Scan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scan::InitAsDefaultInstance() {
}

Scan::Scan(const Scan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scan::~Scan() {
  SharedDtor();
}

void Scan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scan_descriptor_;
}

const Scan& Scan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hokuyo_2eproto();  return *default_instance_;
}

Scan* Scan::default_instance_ = NULL;

Scan* Scan::New() const {
  return new Scan;
}

void Scan::Clear() {
  angles_.Clear();
  distances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double angles = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_angles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_distances;
        break;
      }
      
      // repeated int32 distances = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_distances())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_distances())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double angles = 1 [packed = true];
  if (this->angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_angles_cached_byte_size_);
  }
  for (int i = 0; i < this->angles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->angles(i), output);
  }
  
  // repeated int32 distances = 2 [packed = true];
  if (this->distances_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_distances_cached_byte_size_);
  }
  for (int i = 0; i < this->distances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->distances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double angles = 1 [packed = true];
  if (this->angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _angles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->angles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->angles(i), target);
  }
  
  // repeated int32 distances = 2 [packed = true];
  if (this->distances_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _distances_cached_byte_size_, target);
  }
  for (int i = 0; i < this->distances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->distances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scan::ByteSize() const {
  int total_size = 0;
  
  // repeated double angles = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->angles_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _angles_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 distances = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->distances_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->distances(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _distances_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scan::MergeFrom(const Scan& from) {
  GOOGLE_CHECK_NE(&from, this);
  angles_.MergeFrom(from.angles_);
  distances_.MergeFrom(from.distances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scan::CopyFrom(const Scan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scan::IsInitialized() const {
  
  return true;
}

void Scan::Swap(Scan* other) {
  if (other != this) {
    angles_.Swap(&other->angles_);
    distances_.Swap(&other->distances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scan_descriptor_;
  metadata.reflection = Scan_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  get_single_scan(kGetSingleScanFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::hokuyo_proto::Scan >, 11, false >
  scan(kScanFieldNumber, ::amber::hokuyo_proto::Scan::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace hokuyo_proto
}  // namespace amber

// @@protoc_insertion_point(global_scope)
